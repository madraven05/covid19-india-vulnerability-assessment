let searchBtn = document.getElementById('search-btn');
var mymap = L.map('mapid').setView([23.473324, 77.947998], 5);
L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
}).addTo(mymap);
// console.log(rail_form)

var tableBody = document.getElementById('table-body')
var tableCols = document.getElementById('table-columns')

searchBtn.addEventListener('click', function () {
    // console.log("Hello!")
    var selectStartState = document.getElementById('inputStartState')
    let startState = selectStartState.options[selectStartState.selectedIndex].value

    var selectEndState = document.getElementById('inputEndState')
    let endState = selectEndState.options[selectEndState.selectedIndex].value

    addTable(startState, endState);
    plotMap(startState, endState);
    
    // console.log(endState)
});



function addTable(startState, endState) {
    tableBody.innerHTML = '';
    tableCols.innerHTML = '';
    
    tableCols.innerHTML += "<tr><td>" + "Train Name"  + "</td><td>" + "Rail Line Vulnerability Score" + "</td></tr>"

    $.getJSON('/static/rail_net.json', function (data) {
    

    if (!endState.localeCompare("Choose...")) {
        for (var i = 0; i < data.features.length; i++) {
            let props = data.features[i].properties
            if (!props.from_state.localeCompare(startState)) {
                tableBody.innerHTML += "<tr><td>" + props.name  + "</td><td>" + props.rv + "</td></tr>"
            }
            // console.log(tableBody.innerHTML)
        }
    }

    else if (!startState.localeCompare("Choose...")) {
        for (var i = 0; i < data.features.length; i++) {
            let props = data.features[i].properties
            if (!props.to_state.localeCompare(endState)) {
                tableBody.innerHTML += "<tr><td>" + props.name  + "</td><td>" + props.rv + "</td></tr>"
            }
        }
    }

    else {
        for (var i = 0; i < data.features.length; i++) {
            let props = data.features[i].properties
            if (!props.to_state.localeCompare(endState) && !props.from_state.localeCompare(startState)) {
                tableBody.innerHTML += "<tr><td>" + props.name  + "</td><td>" + props.rv + "</td></tr>"
            }
        }
    }

})




}




function getColor(d) {
    return d > 14 ? '#800026' :
        d > 12 ? '#BD0026' :
            d > 10 ? '#E31A1C' :
                d > 8 ? '#FC412A' :
                    d > 6 ? '#FD8D3C' :
                        d > 4 ? '#FEB24C' :
                            d > 2 ? '#FED976' :
                                '#FFEDA0';
}

function style(features) {
    // console.log("called")
    return {
        fillColor: getColor(features.properties.rv),
        weight: 0.2 * features.properties.rv,
        opacity: 1,
        color: 'white',
        fillOpacity: 1
    };
}

function plotMap(startState, endState) {


    mymap.eachLayer(function (layer) {
        mymap.removeLayer(layer);
    });

    var myIcon = L.icon({
        iconUrl: '/static/icon.png',
        iconSize: [38, 95],
        iconAnchor: [22, 94],
        popupAnchor: [-3, -76],
        shadowSize: [68, 95],
        shadowAnchor: [22, 94]
    });

    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(mymap);

    // Plot stations
    $.getJSON('/static/active_stn.json', function (stndata) {
        var stnlayer = L.geoJSON().addTo(mymap);
        console.log(stndata.features[0].geometry.coordinates)

        for (var i = 0; i < stndata.features.length; i++) {
            stnlayer.addData(stndata.features[i])
        }
    })

    // Plotting rail lines
    $.getJSON('/static/rail_net.json', function (data) {
        console.log(data.features[0])
        var linelayer = L.geoJSON().addTo(mymap);
        L.icon({
            iconSize: [10, 10]
        })

        if (!endState.localeCompare("Choose...")) {
            for (var i = 0; i < data.features.length; i++) {
                let props = data.features[i].properties
                if (!props.from_state.localeCompare(startState)) {
                    linelayer.addData(data.features[i]);
                }
            }
        }
        else if (!startState.localeCompare("Choose...")) {
            for (var i = 0; i < data.features.length; i++) {
                let props = data.features[i].properties
                if (!props.to_state.localeCompare(endState)) {
                    linelayer.addData(data.features[i]);
                }
            }
        }

        else {
            for (var i = 0; i < data.features.length; i++) {
                let props = data.features[i].properties
                if (!props.to_state.localeCompare(endState) && !props.from_state.localeCompare(startState)) {
                    linelayer.addData(data.features[i]);
                }
            }
        }
        linelayer.eachLayer(function (featureInstanceLayer) {
            var propertyValue = featureInstanceLayer.feature.properties.rv;
            console.log(propertyValue)
            // Your function that determines a fill color for a particular
            // property name and value.
            var myFillColor = getColor(propertyValue);

            featureInstanceLayer.setStyle({
                fillColor: myFillColor,
                color: myFillColor,
                fillOpacity: 0.8,
                weight: 10
            });
        });



    })

}


